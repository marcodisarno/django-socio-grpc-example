// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: socio_bib_example_grpc/v1/example_bib_app.proto

package v1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "gitlab.com/larasuite/lara-django-data/grpc/socio_bib_example_grpc/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// AuthorControllerName is the fully-qualified name of the AuthorController service.
	AuthorControllerName = "dsg_example.example_bib_app.AuthorController"
	// BookControllerName is the fully-qualified name of the BookController service.
	BookControllerName = "dsg_example.example_bib_app.BookController"
	// JournalControllerName is the fully-qualified name of the JournalController service.
	JournalControllerName = "dsg_example.example_bib_app.JournalController"
	// PublicationCategoryControllerName is the fully-qualified name of the
	// PublicationCategoryController service.
	PublicationCategoryControllerName = "dsg_example.example_bib_app.PublicationCategoryController"
	// PublisherControllerName is the fully-qualified name of the PublisherController service.
	PublisherControllerName = "dsg_example.example_bib_app.PublisherController"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthorControllerCreateProcedure is the fully-qualified name of the AuthorController's Create RPC.
	AuthorControllerCreateProcedure = "/dsg_example.example_bib_app.AuthorController/Create"
	// AuthorControllerDestroyProcedure is the fully-qualified name of the AuthorController's Destroy
	// RPC.
	AuthorControllerDestroyProcedure = "/dsg_example.example_bib_app.AuthorController/Destroy"
	// AuthorControllerListProcedure is the fully-qualified name of the AuthorController's List RPC.
	AuthorControllerListProcedure = "/dsg_example.example_bib_app.AuthorController/List"
	// AuthorControllerPartialUpdateProcedure is the fully-qualified name of the AuthorController's
	// PartialUpdate RPC.
	AuthorControllerPartialUpdateProcedure = "/dsg_example.example_bib_app.AuthorController/PartialUpdate"
	// AuthorControllerRetrieveProcedure is the fully-qualified name of the AuthorController's Retrieve
	// RPC.
	AuthorControllerRetrieveProcedure = "/dsg_example.example_bib_app.AuthorController/Retrieve"
	// AuthorControllerUpdateProcedure is the fully-qualified name of the AuthorController's Update RPC.
	AuthorControllerUpdateProcedure = "/dsg_example.example_bib_app.AuthorController/Update"
	// BookControllerCreateProcedure is the fully-qualified name of the BookController's Create RPC.
	BookControllerCreateProcedure = "/dsg_example.example_bib_app.BookController/Create"
	// BookControllerDestroyProcedure is the fully-qualified name of the BookController's Destroy RPC.
	BookControllerDestroyProcedure = "/dsg_example.example_bib_app.BookController/Destroy"
	// BookControllerListProcedure is the fully-qualified name of the BookController's List RPC.
	BookControllerListProcedure = "/dsg_example.example_bib_app.BookController/List"
	// BookControllerPartialUpdateProcedure is the fully-qualified name of the BookController's
	// PartialUpdate RPC.
	BookControllerPartialUpdateProcedure = "/dsg_example.example_bib_app.BookController/PartialUpdate"
	// BookControllerRetrieveProcedure is the fully-qualified name of the BookController's Retrieve RPC.
	BookControllerRetrieveProcedure = "/dsg_example.example_bib_app.BookController/Retrieve"
	// BookControllerStreamProcedure is the fully-qualified name of the BookController's Stream RPC.
	BookControllerStreamProcedure = "/dsg_example.example_bib_app.BookController/Stream"
	// BookControllerStreamBooksByIDListProcedure is the fully-qualified name of the BookController's
	// StreamBooksByIDList RPC.
	BookControllerStreamBooksByIDListProcedure = "/dsg_example.example_bib_app.BookController/StreamBooksByIDList"
	// BookControllerUpdateProcedure is the fully-qualified name of the BookController's Update RPC.
	BookControllerUpdateProcedure = "/dsg_example.example_bib_app.BookController/Update"
	// JournalControllerCreateProcedure is the fully-qualified name of the JournalController's Create
	// RPC.
	JournalControllerCreateProcedure = "/dsg_example.example_bib_app.JournalController/Create"
	// JournalControllerDestroyProcedure is the fully-qualified name of the JournalController's Destroy
	// RPC.
	JournalControllerDestroyProcedure = "/dsg_example.example_bib_app.JournalController/Destroy"
	// JournalControllerListProcedure is the fully-qualified name of the JournalController's List RPC.
	JournalControllerListProcedure = "/dsg_example.example_bib_app.JournalController/List"
	// JournalControllerPartialUpdateProcedure is the fully-qualified name of the JournalController's
	// PartialUpdate RPC.
	JournalControllerPartialUpdateProcedure = "/dsg_example.example_bib_app.JournalController/PartialUpdate"
	// JournalControllerRetrieveProcedure is the fully-qualified name of the JournalController's
	// Retrieve RPC.
	JournalControllerRetrieveProcedure = "/dsg_example.example_bib_app.JournalController/Retrieve"
	// JournalControllerUpdateProcedure is the fully-qualified name of the JournalController's Update
	// RPC.
	JournalControllerUpdateProcedure = "/dsg_example.example_bib_app.JournalController/Update"
	// PublicationCategoryControllerCreateProcedure is the fully-qualified name of the
	// PublicationCategoryController's Create RPC.
	PublicationCategoryControllerCreateProcedure = "/dsg_example.example_bib_app.PublicationCategoryController/Create"
	// PublicationCategoryControllerDestroyProcedure is the fully-qualified name of the
	// PublicationCategoryController's Destroy RPC.
	PublicationCategoryControllerDestroyProcedure = "/dsg_example.example_bib_app.PublicationCategoryController/Destroy"
	// PublicationCategoryControllerListProcedure is the fully-qualified name of the
	// PublicationCategoryController's List RPC.
	PublicationCategoryControllerListProcedure = "/dsg_example.example_bib_app.PublicationCategoryController/List"
	// PublicationCategoryControllerPartialUpdateProcedure is the fully-qualified name of the
	// PublicationCategoryController's PartialUpdate RPC.
	PublicationCategoryControllerPartialUpdateProcedure = "/dsg_example.example_bib_app.PublicationCategoryController/PartialUpdate"
	// PublicationCategoryControllerRetrieveProcedure is the fully-qualified name of the
	// PublicationCategoryController's Retrieve RPC.
	PublicationCategoryControllerRetrieveProcedure = "/dsg_example.example_bib_app.PublicationCategoryController/Retrieve"
	// PublicationCategoryControllerUpdateProcedure is the fully-qualified name of the
	// PublicationCategoryController's Update RPC.
	PublicationCategoryControllerUpdateProcedure = "/dsg_example.example_bib_app.PublicationCategoryController/Update"
	// PublisherControllerCreateProcedure is the fully-qualified name of the PublisherController's
	// Create RPC.
	PublisherControllerCreateProcedure = "/dsg_example.example_bib_app.PublisherController/Create"
	// PublisherControllerDestroyProcedure is the fully-qualified name of the PublisherController's
	// Destroy RPC.
	PublisherControllerDestroyProcedure = "/dsg_example.example_bib_app.PublisherController/Destroy"
	// PublisherControllerListProcedure is the fully-qualified name of the PublisherController's List
	// RPC.
	PublisherControllerListProcedure = "/dsg_example.example_bib_app.PublisherController/List"
	// PublisherControllerPartialUpdateProcedure is the fully-qualified name of the
	// PublisherController's PartialUpdate RPC.
	PublisherControllerPartialUpdateProcedure = "/dsg_example.example_bib_app.PublisherController/PartialUpdate"
	// PublisherControllerRetrieveProcedure is the fully-qualified name of the PublisherController's
	// Retrieve RPC.
	PublisherControllerRetrieveProcedure = "/dsg_example.example_bib_app.PublisherController/Retrieve"
	// PublisherControllerUpdateProcedure is the fully-qualified name of the PublisherController's
	// Update RPC.
	PublisherControllerUpdateProcedure = "/dsg_example.example_bib_app.PublisherController/Update"
)

// AuthorControllerClient is a client for the dsg_example.example_bib_app.AuthorController service.
type AuthorControllerClient interface {
	Create(context.Context, *connect_go.Request[v1.AuthorRequest]) (*connect_go.Response[v1.AuthorResponse], error)
	Destroy(context.Context, *connect_go.Request[v1.AuthorDestroyRequest]) (*connect_go.Response[emptypb.Empty], error)
	List(context.Context, *connect_go.Request[v1.AuthorListRequest]) (*connect_go.Response[v1.AuthorListResponse], error)
	PartialUpdate(context.Context, *connect_go.Request[v1.AuthorPartialUpdateRequest]) (*connect_go.Response[v1.AuthorResponse], error)
	Retrieve(context.Context, *connect_go.Request[v1.AuthorRetrieveRequest]) (*connect_go.Response[v1.AuthorResponse], error)
	Update(context.Context, *connect_go.Request[v1.AuthorRequest]) (*connect_go.Response[v1.AuthorResponse], error)
}

// NewAuthorControllerClient constructs a client for the
// dsg_example.example_bib_app.AuthorController service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthorControllerClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) AuthorControllerClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &authorControllerClient{
		create: connect_go.NewClient[v1.AuthorRequest, v1.AuthorResponse](
			httpClient,
			baseURL+AuthorControllerCreateProcedure,
			opts...,
		),
		destroy: connect_go.NewClient[v1.AuthorDestroyRequest, emptypb.Empty](
			httpClient,
			baseURL+AuthorControllerDestroyProcedure,
			opts...,
		),
		list: connect_go.NewClient[v1.AuthorListRequest, v1.AuthorListResponse](
			httpClient,
			baseURL+AuthorControllerListProcedure,
			opts...,
		),
		partialUpdate: connect_go.NewClient[v1.AuthorPartialUpdateRequest, v1.AuthorResponse](
			httpClient,
			baseURL+AuthorControllerPartialUpdateProcedure,
			opts...,
		),
		retrieve: connect_go.NewClient[v1.AuthorRetrieveRequest, v1.AuthorResponse](
			httpClient,
			baseURL+AuthorControllerRetrieveProcedure,
			opts...,
		),
		update: connect_go.NewClient[v1.AuthorRequest, v1.AuthorResponse](
			httpClient,
			baseURL+AuthorControllerUpdateProcedure,
			opts...,
		),
	}
}

// authorControllerClient implements AuthorControllerClient.
type authorControllerClient struct {
	create        *connect_go.Client[v1.AuthorRequest, v1.AuthorResponse]
	destroy       *connect_go.Client[v1.AuthorDestroyRequest, emptypb.Empty]
	list          *connect_go.Client[v1.AuthorListRequest, v1.AuthorListResponse]
	partialUpdate *connect_go.Client[v1.AuthorPartialUpdateRequest, v1.AuthorResponse]
	retrieve      *connect_go.Client[v1.AuthorRetrieveRequest, v1.AuthorResponse]
	update        *connect_go.Client[v1.AuthorRequest, v1.AuthorResponse]
}

// Create calls dsg_example.example_bib_app.AuthorController.Create.
func (c *authorControllerClient) Create(ctx context.Context, req *connect_go.Request[v1.AuthorRequest]) (*connect_go.Response[v1.AuthorResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Destroy calls dsg_example.example_bib_app.AuthorController.Destroy.
func (c *authorControllerClient) Destroy(ctx context.Context, req *connect_go.Request[v1.AuthorDestroyRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.destroy.CallUnary(ctx, req)
}

// List calls dsg_example.example_bib_app.AuthorController.List.
func (c *authorControllerClient) List(ctx context.Context, req *connect_go.Request[v1.AuthorListRequest]) (*connect_go.Response[v1.AuthorListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// PartialUpdate calls dsg_example.example_bib_app.AuthorController.PartialUpdate.
func (c *authorControllerClient) PartialUpdate(ctx context.Context, req *connect_go.Request[v1.AuthorPartialUpdateRequest]) (*connect_go.Response[v1.AuthorResponse], error) {
	return c.partialUpdate.CallUnary(ctx, req)
}

// Retrieve calls dsg_example.example_bib_app.AuthorController.Retrieve.
func (c *authorControllerClient) Retrieve(ctx context.Context, req *connect_go.Request[v1.AuthorRetrieveRequest]) (*connect_go.Response[v1.AuthorResponse], error) {
	return c.retrieve.CallUnary(ctx, req)
}

// Update calls dsg_example.example_bib_app.AuthorController.Update.
func (c *authorControllerClient) Update(ctx context.Context, req *connect_go.Request[v1.AuthorRequest]) (*connect_go.Response[v1.AuthorResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// AuthorControllerHandler is an implementation of the dsg_example.example_bib_app.AuthorController
// service.
type AuthorControllerHandler interface {
	Create(context.Context, *connect_go.Request[v1.AuthorRequest]) (*connect_go.Response[v1.AuthorResponse], error)
	Destroy(context.Context, *connect_go.Request[v1.AuthorDestroyRequest]) (*connect_go.Response[emptypb.Empty], error)
	List(context.Context, *connect_go.Request[v1.AuthorListRequest]) (*connect_go.Response[v1.AuthorListResponse], error)
	PartialUpdate(context.Context, *connect_go.Request[v1.AuthorPartialUpdateRequest]) (*connect_go.Response[v1.AuthorResponse], error)
	Retrieve(context.Context, *connect_go.Request[v1.AuthorRetrieveRequest]) (*connect_go.Response[v1.AuthorResponse], error)
	Update(context.Context, *connect_go.Request[v1.AuthorRequest]) (*connect_go.Response[v1.AuthorResponse], error)
}

// NewAuthorControllerHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthorControllerHandler(svc AuthorControllerHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	authorControllerCreateHandler := connect_go.NewUnaryHandler(
		AuthorControllerCreateProcedure,
		svc.Create,
		opts...,
	)
	authorControllerDestroyHandler := connect_go.NewUnaryHandler(
		AuthorControllerDestroyProcedure,
		svc.Destroy,
		opts...,
	)
	authorControllerListHandler := connect_go.NewUnaryHandler(
		AuthorControllerListProcedure,
		svc.List,
		opts...,
	)
	authorControllerPartialUpdateHandler := connect_go.NewUnaryHandler(
		AuthorControllerPartialUpdateProcedure,
		svc.PartialUpdate,
		opts...,
	)
	authorControllerRetrieveHandler := connect_go.NewUnaryHandler(
		AuthorControllerRetrieveProcedure,
		svc.Retrieve,
		opts...,
	)
	authorControllerUpdateHandler := connect_go.NewUnaryHandler(
		AuthorControllerUpdateProcedure,
		svc.Update,
		opts...,
	)
	return "/dsg_example.example_bib_app.AuthorController/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthorControllerCreateProcedure:
			authorControllerCreateHandler.ServeHTTP(w, r)
		case AuthorControllerDestroyProcedure:
			authorControllerDestroyHandler.ServeHTTP(w, r)
		case AuthorControllerListProcedure:
			authorControllerListHandler.ServeHTTP(w, r)
		case AuthorControllerPartialUpdateProcedure:
			authorControllerPartialUpdateHandler.ServeHTTP(w, r)
		case AuthorControllerRetrieveProcedure:
			authorControllerRetrieveHandler.ServeHTTP(w, r)
		case AuthorControllerUpdateProcedure:
			authorControllerUpdateHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthorControllerHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthorControllerHandler struct{}

func (UnimplementedAuthorControllerHandler) Create(context.Context, *connect_go.Request[v1.AuthorRequest]) (*connect_go.Response[v1.AuthorResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("dsg_example.example_bib_app.AuthorController.Create is not implemented"))
}

func (UnimplementedAuthorControllerHandler) Destroy(context.Context, *connect_go.Request[v1.AuthorDestroyRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("dsg_example.example_bib_app.AuthorController.Destroy is not implemented"))
}

func (UnimplementedAuthorControllerHandler) List(context.Context, *connect_go.Request[v1.AuthorListRequest]) (*connect_go.Response[v1.AuthorListResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("dsg_example.example_bib_app.AuthorController.List is not implemented"))
}

func (UnimplementedAuthorControllerHandler) PartialUpdate(context.Context, *connect_go.Request[v1.AuthorPartialUpdateRequest]) (*connect_go.Response[v1.AuthorResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("dsg_example.example_bib_app.AuthorController.PartialUpdate is not implemented"))
}

func (UnimplementedAuthorControllerHandler) Retrieve(context.Context, *connect_go.Request[v1.AuthorRetrieveRequest]) (*connect_go.Response[v1.AuthorResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("dsg_example.example_bib_app.AuthorController.Retrieve is not implemented"))
}

func (UnimplementedAuthorControllerHandler) Update(context.Context, *connect_go.Request[v1.AuthorRequest]) (*connect_go.Response[v1.AuthorResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("dsg_example.example_bib_app.AuthorController.Update is not implemented"))
}

// BookControllerClient is a client for the dsg_example.example_bib_app.BookController service.
type BookControllerClient interface {
	Create(context.Context, *connect_go.Request[v1.BookRequest]) (*connect_go.Response[v1.BookResponse], error)
	Destroy(context.Context, *connect_go.Request[v1.BookDestroyRequest]) (*connect_go.Response[emptypb.Empty], error)
	List(context.Context, *connect_go.Request[v1.BookListRequest]) (*connect_go.Response[v1.BookListResponse], error)
	PartialUpdate(context.Context, *connect_go.Request[v1.BookPartialUpdateRequest]) (*connect_go.Response[v1.BookResponse], error)
	Retrieve(context.Context, *connect_go.Request[v1.BookRetrieveRequest]) (*connect_go.Response[v1.BookResponse], error)
	Stream(context.Context, *connect_go.Request[v1.BookStreamRequest]) (*connect_go.ServerStreamForClient[v1.BookResponse], error)
	StreamBooksByIDList(context.Context) *connect_go.BidiStreamForClient[v1.BookStreamBooksByIDListRequest, v1.BookStreamBooksByIDListResponse]
	Update(context.Context, *connect_go.Request[v1.BookRequest]) (*connect_go.Response[v1.BookResponse], error)
}

// NewBookControllerClient constructs a client for the dsg_example.example_bib_app.BookController
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBookControllerClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) BookControllerClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &bookControllerClient{
		create: connect_go.NewClient[v1.BookRequest, v1.BookResponse](
			httpClient,
			baseURL+BookControllerCreateProcedure,
			opts...,
		),
		destroy: connect_go.NewClient[v1.BookDestroyRequest, emptypb.Empty](
			httpClient,
			baseURL+BookControllerDestroyProcedure,
			opts...,
		),
		list: connect_go.NewClient[v1.BookListRequest, v1.BookListResponse](
			httpClient,
			baseURL+BookControllerListProcedure,
			opts...,
		),
		partialUpdate: connect_go.NewClient[v1.BookPartialUpdateRequest, v1.BookResponse](
			httpClient,
			baseURL+BookControllerPartialUpdateProcedure,
			opts...,
		),
		retrieve: connect_go.NewClient[v1.BookRetrieveRequest, v1.BookResponse](
			httpClient,
			baseURL+BookControllerRetrieveProcedure,
			opts...,
		),
		stream: connect_go.NewClient[v1.BookStreamRequest, v1.BookResponse](
			httpClient,
			baseURL+BookControllerStreamProcedure,
			opts...,
		),
		streamBooksByIDList: connect_go.NewClient[v1.BookStreamBooksByIDListRequest, v1.BookStreamBooksByIDListResponse](
			httpClient,
			baseURL+BookControllerStreamBooksByIDListProcedure,
			opts...,
		),
		update: connect_go.NewClient[v1.BookRequest, v1.BookResponse](
			httpClient,
			baseURL+BookControllerUpdateProcedure,
			opts...,
		),
	}
}

// bookControllerClient implements BookControllerClient.
type bookControllerClient struct {
	create              *connect_go.Client[v1.BookRequest, v1.BookResponse]
	destroy             *connect_go.Client[v1.BookDestroyRequest, emptypb.Empty]
	list                *connect_go.Client[v1.BookListRequest, v1.BookListResponse]
	partialUpdate       *connect_go.Client[v1.BookPartialUpdateRequest, v1.BookResponse]
	retrieve            *connect_go.Client[v1.BookRetrieveRequest, v1.BookResponse]
	stream              *connect_go.Client[v1.BookStreamRequest, v1.BookResponse]
	streamBooksByIDList *connect_go.Client[v1.BookStreamBooksByIDListRequest, v1.BookStreamBooksByIDListResponse]
	update              *connect_go.Client[v1.BookRequest, v1.BookResponse]
}

// Create calls dsg_example.example_bib_app.BookController.Create.
func (c *bookControllerClient) Create(ctx context.Context, req *connect_go.Request[v1.BookRequest]) (*connect_go.Response[v1.BookResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Destroy calls dsg_example.example_bib_app.BookController.Destroy.
func (c *bookControllerClient) Destroy(ctx context.Context, req *connect_go.Request[v1.BookDestroyRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.destroy.CallUnary(ctx, req)
}

// List calls dsg_example.example_bib_app.BookController.List.
func (c *bookControllerClient) List(ctx context.Context, req *connect_go.Request[v1.BookListRequest]) (*connect_go.Response[v1.BookListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// PartialUpdate calls dsg_example.example_bib_app.BookController.PartialUpdate.
func (c *bookControllerClient) PartialUpdate(ctx context.Context, req *connect_go.Request[v1.BookPartialUpdateRequest]) (*connect_go.Response[v1.BookResponse], error) {
	return c.partialUpdate.CallUnary(ctx, req)
}

// Retrieve calls dsg_example.example_bib_app.BookController.Retrieve.
func (c *bookControllerClient) Retrieve(ctx context.Context, req *connect_go.Request[v1.BookRetrieveRequest]) (*connect_go.Response[v1.BookResponse], error) {
	return c.retrieve.CallUnary(ctx, req)
}

// Stream calls dsg_example.example_bib_app.BookController.Stream.
func (c *bookControllerClient) Stream(ctx context.Context, req *connect_go.Request[v1.BookStreamRequest]) (*connect_go.ServerStreamForClient[v1.BookResponse], error) {
	return c.stream.CallServerStream(ctx, req)
}

// StreamBooksByIDList calls dsg_example.example_bib_app.BookController.StreamBooksByIDList.
func (c *bookControllerClient) StreamBooksByIDList(ctx context.Context) *connect_go.BidiStreamForClient[v1.BookStreamBooksByIDListRequest, v1.BookStreamBooksByIDListResponse] {
	return c.streamBooksByIDList.CallBidiStream(ctx)
}

// Update calls dsg_example.example_bib_app.BookController.Update.
func (c *bookControllerClient) Update(ctx context.Context, req *connect_go.Request[v1.BookRequest]) (*connect_go.Response[v1.BookResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// BookControllerHandler is an implementation of the dsg_example.example_bib_app.BookController
// service.
type BookControllerHandler interface {
	Create(context.Context, *connect_go.Request[v1.BookRequest]) (*connect_go.Response[v1.BookResponse], error)
	Destroy(context.Context, *connect_go.Request[v1.BookDestroyRequest]) (*connect_go.Response[emptypb.Empty], error)
	List(context.Context, *connect_go.Request[v1.BookListRequest]) (*connect_go.Response[v1.BookListResponse], error)
	PartialUpdate(context.Context, *connect_go.Request[v1.BookPartialUpdateRequest]) (*connect_go.Response[v1.BookResponse], error)
	Retrieve(context.Context, *connect_go.Request[v1.BookRetrieveRequest]) (*connect_go.Response[v1.BookResponse], error)
	Stream(context.Context, *connect_go.Request[v1.BookStreamRequest], *connect_go.ServerStream[v1.BookResponse]) error
	StreamBooksByIDList(context.Context, *connect_go.BidiStream[v1.BookStreamBooksByIDListRequest, v1.BookStreamBooksByIDListResponse]) error
	Update(context.Context, *connect_go.Request[v1.BookRequest]) (*connect_go.Response[v1.BookResponse], error)
}

// NewBookControllerHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBookControllerHandler(svc BookControllerHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	bookControllerCreateHandler := connect_go.NewUnaryHandler(
		BookControllerCreateProcedure,
		svc.Create,
		opts...,
	)
	bookControllerDestroyHandler := connect_go.NewUnaryHandler(
		BookControllerDestroyProcedure,
		svc.Destroy,
		opts...,
	)
	bookControllerListHandler := connect_go.NewUnaryHandler(
		BookControllerListProcedure,
		svc.List,
		opts...,
	)
	bookControllerPartialUpdateHandler := connect_go.NewUnaryHandler(
		BookControllerPartialUpdateProcedure,
		svc.PartialUpdate,
		opts...,
	)
	bookControllerRetrieveHandler := connect_go.NewUnaryHandler(
		BookControllerRetrieveProcedure,
		svc.Retrieve,
		opts...,
	)
	bookControllerStreamHandler := connect_go.NewServerStreamHandler(
		BookControllerStreamProcedure,
		svc.Stream,
		opts...,
	)
	bookControllerStreamBooksByIDListHandler := connect_go.NewBidiStreamHandler(
		BookControllerStreamBooksByIDListProcedure,
		svc.StreamBooksByIDList,
		opts...,
	)
	bookControllerUpdateHandler := connect_go.NewUnaryHandler(
		BookControllerUpdateProcedure,
		svc.Update,
		opts...,
	)
	return "/dsg_example.example_bib_app.BookController/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BookControllerCreateProcedure:
			bookControllerCreateHandler.ServeHTTP(w, r)
		case BookControllerDestroyProcedure:
			bookControllerDestroyHandler.ServeHTTP(w, r)
		case BookControllerListProcedure:
			bookControllerListHandler.ServeHTTP(w, r)
		case BookControllerPartialUpdateProcedure:
			bookControllerPartialUpdateHandler.ServeHTTP(w, r)
		case BookControllerRetrieveProcedure:
			bookControllerRetrieveHandler.ServeHTTP(w, r)
		case BookControllerStreamProcedure:
			bookControllerStreamHandler.ServeHTTP(w, r)
		case BookControllerStreamBooksByIDListProcedure:
			bookControllerStreamBooksByIDListHandler.ServeHTTP(w, r)
		case BookControllerUpdateProcedure:
			bookControllerUpdateHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBookControllerHandler returns CodeUnimplemented from all methods.
type UnimplementedBookControllerHandler struct{}

func (UnimplementedBookControllerHandler) Create(context.Context, *connect_go.Request[v1.BookRequest]) (*connect_go.Response[v1.BookResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("dsg_example.example_bib_app.BookController.Create is not implemented"))
}

func (UnimplementedBookControllerHandler) Destroy(context.Context, *connect_go.Request[v1.BookDestroyRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("dsg_example.example_bib_app.BookController.Destroy is not implemented"))
}

func (UnimplementedBookControllerHandler) List(context.Context, *connect_go.Request[v1.BookListRequest]) (*connect_go.Response[v1.BookListResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("dsg_example.example_bib_app.BookController.List is not implemented"))
}

func (UnimplementedBookControllerHandler) PartialUpdate(context.Context, *connect_go.Request[v1.BookPartialUpdateRequest]) (*connect_go.Response[v1.BookResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("dsg_example.example_bib_app.BookController.PartialUpdate is not implemented"))
}

func (UnimplementedBookControllerHandler) Retrieve(context.Context, *connect_go.Request[v1.BookRetrieveRequest]) (*connect_go.Response[v1.BookResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("dsg_example.example_bib_app.BookController.Retrieve is not implemented"))
}

func (UnimplementedBookControllerHandler) Stream(context.Context, *connect_go.Request[v1.BookStreamRequest], *connect_go.ServerStream[v1.BookResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("dsg_example.example_bib_app.BookController.Stream is not implemented"))
}

func (UnimplementedBookControllerHandler) StreamBooksByIDList(context.Context, *connect_go.BidiStream[v1.BookStreamBooksByIDListRequest, v1.BookStreamBooksByIDListResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("dsg_example.example_bib_app.BookController.StreamBooksByIDList is not implemented"))
}

func (UnimplementedBookControllerHandler) Update(context.Context, *connect_go.Request[v1.BookRequest]) (*connect_go.Response[v1.BookResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("dsg_example.example_bib_app.BookController.Update is not implemented"))
}

// JournalControllerClient is a client for the dsg_example.example_bib_app.JournalController
// service.
type JournalControllerClient interface {
	Create(context.Context, *connect_go.Request[v1.JournalRequest]) (*connect_go.Response[v1.JournalResponse], error)
	Destroy(context.Context, *connect_go.Request[v1.JournalDestroyRequest]) (*connect_go.Response[emptypb.Empty], error)
	List(context.Context, *connect_go.Request[v1.JournalListRequest]) (*connect_go.Response[v1.JournalListResponse], error)
	PartialUpdate(context.Context, *connect_go.Request[v1.JournalPartialUpdateRequest]) (*connect_go.Response[v1.JournalResponse], error)
	Retrieve(context.Context, *connect_go.Request[v1.JournalRetrieveRequest]) (*connect_go.Response[v1.JournalResponse], error)
	Update(context.Context, *connect_go.Request[v1.JournalRequest]) (*connect_go.Response[v1.JournalResponse], error)
}

// NewJournalControllerClient constructs a client for the
// dsg_example.example_bib_app.JournalController service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewJournalControllerClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) JournalControllerClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &journalControllerClient{
		create: connect_go.NewClient[v1.JournalRequest, v1.JournalResponse](
			httpClient,
			baseURL+JournalControllerCreateProcedure,
			opts...,
		),
		destroy: connect_go.NewClient[v1.JournalDestroyRequest, emptypb.Empty](
			httpClient,
			baseURL+JournalControllerDestroyProcedure,
			opts...,
		),
		list: connect_go.NewClient[v1.JournalListRequest, v1.JournalListResponse](
			httpClient,
			baseURL+JournalControllerListProcedure,
			opts...,
		),
		partialUpdate: connect_go.NewClient[v1.JournalPartialUpdateRequest, v1.JournalResponse](
			httpClient,
			baseURL+JournalControllerPartialUpdateProcedure,
			opts...,
		),
		retrieve: connect_go.NewClient[v1.JournalRetrieveRequest, v1.JournalResponse](
			httpClient,
			baseURL+JournalControllerRetrieveProcedure,
			opts...,
		),
		update: connect_go.NewClient[v1.JournalRequest, v1.JournalResponse](
			httpClient,
			baseURL+JournalControllerUpdateProcedure,
			opts...,
		),
	}
}

// journalControllerClient implements JournalControllerClient.
type journalControllerClient struct {
	create        *connect_go.Client[v1.JournalRequest, v1.JournalResponse]
	destroy       *connect_go.Client[v1.JournalDestroyRequest, emptypb.Empty]
	list          *connect_go.Client[v1.JournalListRequest, v1.JournalListResponse]
	partialUpdate *connect_go.Client[v1.JournalPartialUpdateRequest, v1.JournalResponse]
	retrieve      *connect_go.Client[v1.JournalRetrieveRequest, v1.JournalResponse]
	update        *connect_go.Client[v1.JournalRequest, v1.JournalResponse]
}

// Create calls dsg_example.example_bib_app.JournalController.Create.
func (c *journalControllerClient) Create(ctx context.Context, req *connect_go.Request[v1.JournalRequest]) (*connect_go.Response[v1.JournalResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Destroy calls dsg_example.example_bib_app.JournalController.Destroy.
func (c *journalControllerClient) Destroy(ctx context.Context, req *connect_go.Request[v1.JournalDestroyRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.destroy.CallUnary(ctx, req)
}

// List calls dsg_example.example_bib_app.JournalController.List.
func (c *journalControllerClient) List(ctx context.Context, req *connect_go.Request[v1.JournalListRequest]) (*connect_go.Response[v1.JournalListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// PartialUpdate calls dsg_example.example_bib_app.JournalController.PartialUpdate.
func (c *journalControllerClient) PartialUpdate(ctx context.Context, req *connect_go.Request[v1.JournalPartialUpdateRequest]) (*connect_go.Response[v1.JournalResponse], error) {
	return c.partialUpdate.CallUnary(ctx, req)
}

// Retrieve calls dsg_example.example_bib_app.JournalController.Retrieve.
func (c *journalControllerClient) Retrieve(ctx context.Context, req *connect_go.Request[v1.JournalRetrieveRequest]) (*connect_go.Response[v1.JournalResponse], error) {
	return c.retrieve.CallUnary(ctx, req)
}

// Update calls dsg_example.example_bib_app.JournalController.Update.
func (c *journalControllerClient) Update(ctx context.Context, req *connect_go.Request[v1.JournalRequest]) (*connect_go.Response[v1.JournalResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// JournalControllerHandler is an implementation of the
// dsg_example.example_bib_app.JournalController service.
type JournalControllerHandler interface {
	Create(context.Context, *connect_go.Request[v1.JournalRequest]) (*connect_go.Response[v1.JournalResponse], error)
	Destroy(context.Context, *connect_go.Request[v1.JournalDestroyRequest]) (*connect_go.Response[emptypb.Empty], error)
	List(context.Context, *connect_go.Request[v1.JournalListRequest]) (*connect_go.Response[v1.JournalListResponse], error)
	PartialUpdate(context.Context, *connect_go.Request[v1.JournalPartialUpdateRequest]) (*connect_go.Response[v1.JournalResponse], error)
	Retrieve(context.Context, *connect_go.Request[v1.JournalRetrieveRequest]) (*connect_go.Response[v1.JournalResponse], error)
	Update(context.Context, *connect_go.Request[v1.JournalRequest]) (*connect_go.Response[v1.JournalResponse], error)
}

// NewJournalControllerHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewJournalControllerHandler(svc JournalControllerHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	journalControllerCreateHandler := connect_go.NewUnaryHandler(
		JournalControllerCreateProcedure,
		svc.Create,
		opts...,
	)
	journalControllerDestroyHandler := connect_go.NewUnaryHandler(
		JournalControllerDestroyProcedure,
		svc.Destroy,
		opts...,
	)
	journalControllerListHandler := connect_go.NewUnaryHandler(
		JournalControllerListProcedure,
		svc.List,
		opts...,
	)
	journalControllerPartialUpdateHandler := connect_go.NewUnaryHandler(
		JournalControllerPartialUpdateProcedure,
		svc.PartialUpdate,
		opts...,
	)
	journalControllerRetrieveHandler := connect_go.NewUnaryHandler(
		JournalControllerRetrieveProcedure,
		svc.Retrieve,
		opts...,
	)
	journalControllerUpdateHandler := connect_go.NewUnaryHandler(
		JournalControllerUpdateProcedure,
		svc.Update,
		opts...,
	)
	return "/dsg_example.example_bib_app.JournalController/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case JournalControllerCreateProcedure:
			journalControllerCreateHandler.ServeHTTP(w, r)
		case JournalControllerDestroyProcedure:
			journalControllerDestroyHandler.ServeHTTP(w, r)
		case JournalControllerListProcedure:
			journalControllerListHandler.ServeHTTP(w, r)
		case JournalControllerPartialUpdateProcedure:
			journalControllerPartialUpdateHandler.ServeHTTP(w, r)
		case JournalControllerRetrieveProcedure:
			journalControllerRetrieveHandler.ServeHTTP(w, r)
		case JournalControllerUpdateProcedure:
			journalControllerUpdateHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedJournalControllerHandler returns CodeUnimplemented from all methods.
type UnimplementedJournalControllerHandler struct{}

func (UnimplementedJournalControllerHandler) Create(context.Context, *connect_go.Request[v1.JournalRequest]) (*connect_go.Response[v1.JournalResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("dsg_example.example_bib_app.JournalController.Create is not implemented"))
}

func (UnimplementedJournalControllerHandler) Destroy(context.Context, *connect_go.Request[v1.JournalDestroyRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("dsg_example.example_bib_app.JournalController.Destroy is not implemented"))
}

func (UnimplementedJournalControllerHandler) List(context.Context, *connect_go.Request[v1.JournalListRequest]) (*connect_go.Response[v1.JournalListResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("dsg_example.example_bib_app.JournalController.List is not implemented"))
}

func (UnimplementedJournalControllerHandler) PartialUpdate(context.Context, *connect_go.Request[v1.JournalPartialUpdateRequest]) (*connect_go.Response[v1.JournalResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("dsg_example.example_bib_app.JournalController.PartialUpdate is not implemented"))
}

func (UnimplementedJournalControllerHandler) Retrieve(context.Context, *connect_go.Request[v1.JournalRetrieveRequest]) (*connect_go.Response[v1.JournalResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("dsg_example.example_bib_app.JournalController.Retrieve is not implemented"))
}

func (UnimplementedJournalControllerHandler) Update(context.Context, *connect_go.Request[v1.JournalRequest]) (*connect_go.Response[v1.JournalResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("dsg_example.example_bib_app.JournalController.Update is not implemented"))
}

// PublicationCategoryControllerClient is a client for the
// dsg_example.example_bib_app.PublicationCategoryController service.
type PublicationCategoryControllerClient interface {
	Create(context.Context, *connect_go.Request[v1.PublicationCategoryRequest]) (*connect_go.Response[v1.PublicationCategoryResponse], error)
	Destroy(context.Context, *connect_go.Request[v1.PublicationCategoryDestroyRequest]) (*connect_go.Response[emptypb.Empty], error)
	List(context.Context, *connect_go.Request[v1.PublicationCategoryListRequest]) (*connect_go.Response[v1.PublicationCategoryListResponse], error)
	PartialUpdate(context.Context, *connect_go.Request[v1.PublicationCategoryPartialUpdateRequest]) (*connect_go.Response[v1.PublicationCategoryResponse], error)
	Retrieve(context.Context, *connect_go.Request[v1.PublicationCategoryRetrieveRequest]) (*connect_go.Response[v1.PublicationCategoryResponse], error)
	Update(context.Context, *connect_go.Request[v1.PublicationCategoryRequest]) (*connect_go.Response[v1.PublicationCategoryResponse], error)
}

// NewPublicationCategoryControllerClient constructs a client for the
// dsg_example.example_bib_app.PublicationCategoryController service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPublicationCategoryControllerClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) PublicationCategoryControllerClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &publicationCategoryControllerClient{
		create: connect_go.NewClient[v1.PublicationCategoryRequest, v1.PublicationCategoryResponse](
			httpClient,
			baseURL+PublicationCategoryControllerCreateProcedure,
			opts...,
		),
		destroy: connect_go.NewClient[v1.PublicationCategoryDestroyRequest, emptypb.Empty](
			httpClient,
			baseURL+PublicationCategoryControllerDestroyProcedure,
			opts...,
		),
		list: connect_go.NewClient[v1.PublicationCategoryListRequest, v1.PublicationCategoryListResponse](
			httpClient,
			baseURL+PublicationCategoryControllerListProcedure,
			opts...,
		),
		partialUpdate: connect_go.NewClient[v1.PublicationCategoryPartialUpdateRequest, v1.PublicationCategoryResponse](
			httpClient,
			baseURL+PublicationCategoryControllerPartialUpdateProcedure,
			opts...,
		),
		retrieve: connect_go.NewClient[v1.PublicationCategoryRetrieveRequest, v1.PublicationCategoryResponse](
			httpClient,
			baseURL+PublicationCategoryControllerRetrieveProcedure,
			opts...,
		),
		update: connect_go.NewClient[v1.PublicationCategoryRequest, v1.PublicationCategoryResponse](
			httpClient,
			baseURL+PublicationCategoryControllerUpdateProcedure,
			opts...,
		),
	}
}

// publicationCategoryControllerClient implements PublicationCategoryControllerClient.
type publicationCategoryControllerClient struct {
	create        *connect_go.Client[v1.PublicationCategoryRequest, v1.PublicationCategoryResponse]
	destroy       *connect_go.Client[v1.PublicationCategoryDestroyRequest, emptypb.Empty]
	list          *connect_go.Client[v1.PublicationCategoryListRequest, v1.PublicationCategoryListResponse]
	partialUpdate *connect_go.Client[v1.PublicationCategoryPartialUpdateRequest, v1.PublicationCategoryResponse]
	retrieve      *connect_go.Client[v1.PublicationCategoryRetrieveRequest, v1.PublicationCategoryResponse]
	update        *connect_go.Client[v1.PublicationCategoryRequest, v1.PublicationCategoryResponse]
}

// Create calls dsg_example.example_bib_app.PublicationCategoryController.Create.
func (c *publicationCategoryControllerClient) Create(ctx context.Context, req *connect_go.Request[v1.PublicationCategoryRequest]) (*connect_go.Response[v1.PublicationCategoryResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Destroy calls dsg_example.example_bib_app.PublicationCategoryController.Destroy.
func (c *publicationCategoryControllerClient) Destroy(ctx context.Context, req *connect_go.Request[v1.PublicationCategoryDestroyRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.destroy.CallUnary(ctx, req)
}

// List calls dsg_example.example_bib_app.PublicationCategoryController.List.
func (c *publicationCategoryControllerClient) List(ctx context.Context, req *connect_go.Request[v1.PublicationCategoryListRequest]) (*connect_go.Response[v1.PublicationCategoryListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// PartialUpdate calls dsg_example.example_bib_app.PublicationCategoryController.PartialUpdate.
func (c *publicationCategoryControllerClient) PartialUpdate(ctx context.Context, req *connect_go.Request[v1.PublicationCategoryPartialUpdateRequest]) (*connect_go.Response[v1.PublicationCategoryResponse], error) {
	return c.partialUpdate.CallUnary(ctx, req)
}

// Retrieve calls dsg_example.example_bib_app.PublicationCategoryController.Retrieve.
func (c *publicationCategoryControllerClient) Retrieve(ctx context.Context, req *connect_go.Request[v1.PublicationCategoryRetrieveRequest]) (*connect_go.Response[v1.PublicationCategoryResponse], error) {
	return c.retrieve.CallUnary(ctx, req)
}

// Update calls dsg_example.example_bib_app.PublicationCategoryController.Update.
func (c *publicationCategoryControllerClient) Update(ctx context.Context, req *connect_go.Request[v1.PublicationCategoryRequest]) (*connect_go.Response[v1.PublicationCategoryResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// PublicationCategoryControllerHandler is an implementation of the
// dsg_example.example_bib_app.PublicationCategoryController service.
type PublicationCategoryControllerHandler interface {
	Create(context.Context, *connect_go.Request[v1.PublicationCategoryRequest]) (*connect_go.Response[v1.PublicationCategoryResponse], error)
	Destroy(context.Context, *connect_go.Request[v1.PublicationCategoryDestroyRequest]) (*connect_go.Response[emptypb.Empty], error)
	List(context.Context, *connect_go.Request[v1.PublicationCategoryListRequest]) (*connect_go.Response[v1.PublicationCategoryListResponse], error)
	PartialUpdate(context.Context, *connect_go.Request[v1.PublicationCategoryPartialUpdateRequest]) (*connect_go.Response[v1.PublicationCategoryResponse], error)
	Retrieve(context.Context, *connect_go.Request[v1.PublicationCategoryRetrieveRequest]) (*connect_go.Response[v1.PublicationCategoryResponse], error)
	Update(context.Context, *connect_go.Request[v1.PublicationCategoryRequest]) (*connect_go.Response[v1.PublicationCategoryResponse], error)
}

// NewPublicationCategoryControllerHandler builds an HTTP handler from the service implementation.
// It returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPublicationCategoryControllerHandler(svc PublicationCategoryControllerHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	publicationCategoryControllerCreateHandler := connect_go.NewUnaryHandler(
		PublicationCategoryControllerCreateProcedure,
		svc.Create,
		opts...,
	)
	publicationCategoryControllerDestroyHandler := connect_go.NewUnaryHandler(
		PublicationCategoryControllerDestroyProcedure,
		svc.Destroy,
		opts...,
	)
	publicationCategoryControllerListHandler := connect_go.NewUnaryHandler(
		PublicationCategoryControllerListProcedure,
		svc.List,
		opts...,
	)
	publicationCategoryControllerPartialUpdateHandler := connect_go.NewUnaryHandler(
		PublicationCategoryControllerPartialUpdateProcedure,
		svc.PartialUpdate,
		opts...,
	)
	publicationCategoryControllerRetrieveHandler := connect_go.NewUnaryHandler(
		PublicationCategoryControllerRetrieveProcedure,
		svc.Retrieve,
		opts...,
	)
	publicationCategoryControllerUpdateHandler := connect_go.NewUnaryHandler(
		PublicationCategoryControllerUpdateProcedure,
		svc.Update,
		opts...,
	)
	return "/dsg_example.example_bib_app.PublicationCategoryController/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PublicationCategoryControllerCreateProcedure:
			publicationCategoryControllerCreateHandler.ServeHTTP(w, r)
		case PublicationCategoryControllerDestroyProcedure:
			publicationCategoryControllerDestroyHandler.ServeHTTP(w, r)
		case PublicationCategoryControllerListProcedure:
			publicationCategoryControllerListHandler.ServeHTTP(w, r)
		case PublicationCategoryControllerPartialUpdateProcedure:
			publicationCategoryControllerPartialUpdateHandler.ServeHTTP(w, r)
		case PublicationCategoryControllerRetrieveProcedure:
			publicationCategoryControllerRetrieveHandler.ServeHTTP(w, r)
		case PublicationCategoryControllerUpdateProcedure:
			publicationCategoryControllerUpdateHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPublicationCategoryControllerHandler returns CodeUnimplemented from all methods.
type UnimplementedPublicationCategoryControllerHandler struct{}

func (UnimplementedPublicationCategoryControllerHandler) Create(context.Context, *connect_go.Request[v1.PublicationCategoryRequest]) (*connect_go.Response[v1.PublicationCategoryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("dsg_example.example_bib_app.PublicationCategoryController.Create is not implemented"))
}

func (UnimplementedPublicationCategoryControllerHandler) Destroy(context.Context, *connect_go.Request[v1.PublicationCategoryDestroyRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("dsg_example.example_bib_app.PublicationCategoryController.Destroy is not implemented"))
}

func (UnimplementedPublicationCategoryControllerHandler) List(context.Context, *connect_go.Request[v1.PublicationCategoryListRequest]) (*connect_go.Response[v1.PublicationCategoryListResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("dsg_example.example_bib_app.PublicationCategoryController.List is not implemented"))
}

func (UnimplementedPublicationCategoryControllerHandler) PartialUpdate(context.Context, *connect_go.Request[v1.PublicationCategoryPartialUpdateRequest]) (*connect_go.Response[v1.PublicationCategoryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("dsg_example.example_bib_app.PublicationCategoryController.PartialUpdate is not implemented"))
}

func (UnimplementedPublicationCategoryControllerHandler) Retrieve(context.Context, *connect_go.Request[v1.PublicationCategoryRetrieveRequest]) (*connect_go.Response[v1.PublicationCategoryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("dsg_example.example_bib_app.PublicationCategoryController.Retrieve is not implemented"))
}

func (UnimplementedPublicationCategoryControllerHandler) Update(context.Context, *connect_go.Request[v1.PublicationCategoryRequest]) (*connect_go.Response[v1.PublicationCategoryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("dsg_example.example_bib_app.PublicationCategoryController.Update is not implemented"))
}

// PublisherControllerClient is a client for the dsg_example.example_bib_app.PublisherController
// service.
type PublisherControllerClient interface {
	Create(context.Context, *connect_go.Request[v1.PublisherRequest]) (*connect_go.Response[v1.PublisherResponse], error)
	Destroy(context.Context, *connect_go.Request[v1.PublisherDestroyRequest]) (*connect_go.Response[emptypb.Empty], error)
	List(context.Context, *connect_go.Request[v1.PublisherListRequest]) (*connect_go.Response[v1.PublisherListResponse], error)
	PartialUpdate(context.Context, *connect_go.Request[v1.PublisherPartialUpdateRequest]) (*connect_go.Response[v1.PublisherResponse], error)
	Retrieve(context.Context, *connect_go.Request[v1.PublisherRetrieveRequest]) (*connect_go.Response[v1.PublisherResponse], error)
	Update(context.Context, *connect_go.Request[v1.PublisherRequest]) (*connect_go.Response[v1.PublisherResponse], error)
}

// NewPublisherControllerClient constructs a client for the
// dsg_example.example_bib_app.PublisherController service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPublisherControllerClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) PublisherControllerClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &publisherControllerClient{
		create: connect_go.NewClient[v1.PublisherRequest, v1.PublisherResponse](
			httpClient,
			baseURL+PublisherControllerCreateProcedure,
			opts...,
		),
		destroy: connect_go.NewClient[v1.PublisherDestroyRequest, emptypb.Empty](
			httpClient,
			baseURL+PublisherControllerDestroyProcedure,
			opts...,
		),
		list: connect_go.NewClient[v1.PublisherListRequest, v1.PublisherListResponse](
			httpClient,
			baseURL+PublisherControllerListProcedure,
			opts...,
		),
		partialUpdate: connect_go.NewClient[v1.PublisherPartialUpdateRequest, v1.PublisherResponse](
			httpClient,
			baseURL+PublisherControllerPartialUpdateProcedure,
			opts...,
		),
		retrieve: connect_go.NewClient[v1.PublisherRetrieveRequest, v1.PublisherResponse](
			httpClient,
			baseURL+PublisherControllerRetrieveProcedure,
			opts...,
		),
		update: connect_go.NewClient[v1.PublisherRequest, v1.PublisherResponse](
			httpClient,
			baseURL+PublisherControllerUpdateProcedure,
			opts...,
		),
	}
}

// publisherControllerClient implements PublisherControllerClient.
type publisherControllerClient struct {
	create        *connect_go.Client[v1.PublisherRequest, v1.PublisherResponse]
	destroy       *connect_go.Client[v1.PublisherDestroyRequest, emptypb.Empty]
	list          *connect_go.Client[v1.PublisherListRequest, v1.PublisherListResponse]
	partialUpdate *connect_go.Client[v1.PublisherPartialUpdateRequest, v1.PublisherResponse]
	retrieve      *connect_go.Client[v1.PublisherRetrieveRequest, v1.PublisherResponse]
	update        *connect_go.Client[v1.PublisherRequest, v1.PublisherResponse]
}

// Create calls dsg_example.example_bib_app.PublisherController.Create.
func (c *publisherControllerClient) Create(ctx context.Context, req *connect_go.Request[v1.PublisherRequest]) (*connect_go.Response[v1.PublisherResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Destroy calls dsg_example.example_bib_app.PublisherController.Destroy.
func (c *publisherControllerClient) Destroy(ctx context.Context, req *connect_go.Request[v1.PublisherDestroyRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.destroy.CallUnary(ctx, req)
}

// List calls dsg_example.example_bib_app.PublisherController.List.
func (c *publisherControllerClient) List(ctx context.Context, req *connect_go.Request[v1.PublisherListRequest]) (*connect_go.Response[v1.PublisherListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// PartialUpdate calls dsg_example.example_bib_app.PublisherController.PartialUpdate.
func (c *publisherControllerClient) PartialUpdate(ctx context.Context, req *connect_go.Request[v1.PublisherPartialUpdateRequest]) (*connect_go.Response[v1.PublisherResponse], error) {
	return c.partialUpdate.CallUnary(ctx, req)
}

// Retrieve calls dsg_example.example_bib_app.PublisherController.Retrieve.
func (c *publisherControllerClient) Retrieve(ctx context.Context, req *connect_go.Request[v1.PublisherRetrieveRequest]) (*connect_go.Response[v1.PublisherResponse], error) {
	return c.retrieve.CallUnary(ctx, req)
}

// Update calls dsg_example.example_bib_app.PublisherController.Update.
func (c *publisherControllerClient) Update(ctx context.Context, req *connect_go.Request[v1.PublisherRequest]) (*connect_go.Response[v1.PublisherResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// PublisherControllerHandler is an implementation of the
// dsg_example.example_bib_app.PublisherController service.
type PublisherControllerHandler interface {
	Create(context.Context, *connect_go.Request[v1.PublisherRequest]) (*connect_go.Response[v1.PublisherResponse], error)
	Destroy(context.Context, *connect_go.Request[v1.PublisherDestroyRequest]) (*connect_go.Response[emptypb.Empty], error)
	List(context.Context, *connect_go.Request[v1.PublisherListRequest]) (*connect_go.Response[v1.PublisherListResponse], error)
	PartialUpdate(context.Context, *connect_go.Request[v1.PublisherPartialUpdateRequest]) (*connect_go.Response[v1.PublisherResponse], error)
	Retrieve(context.Context, *connect_go.Request[v1.PublisherRetrieveRequest]) (*connect_go.Response[v1.PublisherResponse], error)
	Update(context.Context, *connect_go.Request[v1.PublisherRequest]) (*connect_go.Response[v1.PublisherResponse], error)
}

// NewPublisherControllerHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPublisherControllerHandler(svc PublisherControllerHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	publisherControllerCreateHandler := connect_go.NewUnaryHandler(
		PublisherControllerCreateProcedure,
		svc.Create,
		opts...,
	)
	publisherControllerDestroyHandler := connect_go.NewUnaryHandler(
		PublisherControllerDestroyProcedure,
		svc.Destroy,
		opts...,
	)
	publisherControllerListHandler := connect_go.NewUnaryHandler(
		PublisherControllerListProcedure,
		svc.List,
		opts...,
	)
	publisherControllerPartialUpdateHandler := connect_go.NewUnaryHandler(
		PublisherControllerPartialUpdateProcedure,
		svc.PartialUpdate,
		opts...,
	)
	publisherControllerRetrieveHandler := connect_go.NewUnaryHandler(
		PublisherControllerRetrieveProcedure,
		svc.Retrieve,
		opts...,
	)
	publisherControllerUpdateHandler := connect_go.NewUnaryHandler(
		PublisherControllerUpdateProcedure,
		svc.Update,
		opts...,
	)
	return "/dsg_example.example_bib_app.PublisherController/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PublisherControllerCreateProcedure:
			publisherControllerCreateHandler.ServeHTTP(w, r)
		case PublisherControllerDestroyProcedure:
			publisherControllerDestroyHandler.ServeHTTP(w, r)
		case PublisherControllerListProcedure:
			publisherControllerListHandler.ServeHTTP(w, r)
		case PublisherControllerPartialUpdateProcedure:
			publisherControllerPartialUpdateHandler.ServeHTTP(w, r)
		case PublisherControllerRetrieveProcedure:
			publisherControllerRetrieveHandler.ServeHTTP(w, r)
		case PublisherControllerUpdateProcedure:
			publisherControllerUpdateHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPublisherControllerHandler returns CodeUnimplemented from all methods.
type UnimplementedPublisherControllerHandler struct{}

func (UnimplementedPublisherControllerHandler) Create(context.Context, *connect_go.Request[v1.PublisherRequest]) (*connect_go.Response[v1.PublisherResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("dsg_example.example_bib_app.PublisherController.Create is not implemented"))
}

func (UnimplementedPublisherControllerHandler) Destroy(context.Context, *connect_go.Request[v1.PublisherDestroyRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("dsg_example.example_bib_app.PublisherController.Destroy is not implemented"))
}

func (UnimplementedPublisherControllerHandler) List(context.Context, *connect_go.Request[v1.PublisherListRequest]) (*connect_go.Response[v1.PublisherListResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("dsg_example.example_bib_app.PublisherController.List is not implemented"))
}

func (UnimplementedPublisherControllerHandler) PartialUpdate(context.Context, *connect_go.Request[v1.PublisherPartialUpdateRequest]) (*connect_go.Response[v1.PublisherResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("dsg_example.example_bib_app.PublisherController.PartialUpdate is not implemented"))
}

func (UnimplementedPublisherControllerHandler) Retrieve(context.Context, *connect_go.Request[v1.PublisherRetrieveRequest]) (*connect_go.Response[v1.PublisherResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("dsg_example.example_bib_app.PublisherController.Retrieve is not implemented"))
}

func (UnimplementedPublisherControllerHandler) Update(context.Context, *connect_go.Request[v1.PublisherRequest]) (*connect_go.Response[v1.PublisherResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("dsg_example.example_bib_app.PublisherController.Update is not implemented"))
}
